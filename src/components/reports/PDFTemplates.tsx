import React from 'react';
import { Document, Page, Text, View, StyleSheet, Image } from '@react-pdf/renderer';
import { AnyReport, ReportType } from '../../types/report';
import { Photo } from '../../services/photoService';
import { Milestone } from '../../services/milestoneService';

// Create styles for PDF documents
const styles = StyleSheet.create({
  page: {
    padding: 30,
    flexDirection: 'column',
    backgroundColor: '#ffffff',
  },
  header: {
    marginBottom: 20,
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#dddddd',
  },
  headerText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#001532',
    textAlign: 'center',
  },
  subheader: {
    fontSize: 14,
    color: '#4b5563',
    textAlign: 'center',
    marginBottom: 5,
  },
  section: {
    margin: 10,
    padding: 10,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#3498db',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
    paddingBottom: 5,
  },
  text: {
    margin: 5,
    fontSize: 12,
    color: '#4b5563',
  },
  boldText: {
    fontWeight: 'bold',
  },
  photoSection: {
    marginTop: 10,
    marginBottom: 10,
  },
  photoRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  photoContainer: {
    width: '48%',
    marginBottom: 10,
  },
  photo: {
    width: '100%',
    height: 150,
    objectFit: 'cover',
    borderRadius: 5,
  },
  photoCaption: {
    fontSize: 10,
    color: '#6b7280',
    textAlign: 'center',
    marginTop: 5,
  },
  signatureSection: {
    marginTop: 20,
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    paddingTop: 10,
  },
  signatureRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  signatureBox: {
    width: '45%',
    borderBottomWidth: 1,
    borderBottomColor: '#000000',
    padding: 5,
  },
  signatureImage: {
    width: '100%',
    height: 50,
    objectFit: 'contain',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    color: '#9ca3af',
    fontSize: 10,
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    paddingTop: 5,
  },
  table: {
    display: 'table',
    width: 'auto',
    borderStyle: 'solid',
    borderWidth: 1,
    borderColor: '#e5e7eb',
    marginTop: 10,
  },
  tableRow: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  tableHeaderCell: {
    backgroundColor: '#f9fafb',
    padding: 5,
    fontWeight: 'bold',
    color: '#4b5563',
    fontSize: 10,
  },
  tableCell: {
    padding: 5,
    fontSize: 10,
    color: '#4b5563',
  },
});

// Header component for all PDF reports
export const PDFHeader = ({ report }: { report: AnyReport }) => {
  const generateDate = new Date(report.generatedAt).toLocaleDateString();
  
  return (
    <View style={styles.header}>
      <Text style={styles.headerText}>{report.reportType}</Text>
      <Text style={styles.subheader}>Project: {report.projectData?.name || 'Unknown Project'}</Text>
      <Text style={styles.subheader}>Generated: {generateDate}</Text>
    </View>
  );
};

// Photos component for displaying images in reports
export const PDFPhotos = ({ photos, title = 'Photos' }: { photos: Photo[], title?: string }) => (
  <View style={styles.photoSection}>
    <Text style={styles.sectionTitle}>{title}</Text>
    <View style={styles.photoRow}>
      {photos.map((photo, index) => (
        <View key={photo.id || index} style={styles.photoContainer}>
          <Image src={photo.url} style={styles.photo} />
          <Text style={styles.photoCaption}>{photo.caption || `Photo ${index + 1}`}</Text>
        </View>
      ))}
    </View>
  </View>
);

// Signature component for approval and sign-off sections
export const PDFSignature = ({ signatureData }: { 
  signatureData?: { name: string; date: string; signatureDataUrl?: string }
}) => {
  if (!signatureData) return null;
  
  return (
    <View style={styles.signatureSection}>
      <Text style={styles.sectionTitle}>Approval</Text>
      <View style={styles.signatureRow}>
        <View>
          <Text style={styles.text}>Name: {signatureData.name}</Text>
          <Text style={styles.text}>Date: {signatureData.date}</Text>
        </View>
        {signatureData.signatureDataUrl && (
          <View style={styles.signatureBox}>
            <Image src={signatureData.signatureDataUrl} style={styles.signatureImage} />
          </View>
        )}
      </View>
    </View>
  );
};

// Footer component for all PDF reports
export const PDFFooter = ({ date }: { date: string }) => (
  <Text style={styles.footer}>
    Generated by Project Manager App â€¢ {date}
  </Text>
);

// Full PDF document for reports
export const ReportPDFDocument = ({ 
  report, 
  photos, 
  milestones 
}: { 
  report: AnyReport; 
  photos: Photo[];
  milestones: Milestone[];
}) => {
  const generateDate = new Date(report.generatedAt).toLocaleDateString();
  
  // Determine which template to use based on report type
  const renderReportContent = () => {
    switch (report.reportType) {
      case ReportType.InitialSiteAssessment:
        return <InitialSiteAssessmentPDF report={report} photos={photos} />;
        
      case ReportType.ProjectProgress:
        return <ProjectProgressPDF report={report} photos={photos} milestones={milestones} />;
        
      case ReportType.BeforeAfterTransformation:
        return <BeforeAfterTransformationPDF report={report} />;
        
      case ReportType.DamageIssueDocumentation:
        return <DamageIssueDocumentationPDF report={report} />;
        
      case ReportType.ClientApproval:
        return <ClientApprovalPDF report={report} photos={photos} />;
        
      case ReportType.DailyWeeklyProgress:
        return <DailyWeeklyProgressPDF report={report} photos={photos} />;
        
      case ReportType.ContractorPerformance:
        return <ContractorPerformancePDF report={report} photos={photos} />;
        
      case ReportType.FinalProjectCompletion:
        return <FinalProjectCompletionPDF report={report} photos={photos} milestones={milestones} />;
        
      default:
        return (
          <View style={styles.section}>
            <Text style={styles.text}>This report type does not have a specific template.</Text>
            <PDFPhotos photos={photos} />
          </View>
        );
    }
  };

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <PDFHeader report={report} />
        {renderReportContent()}
        <PDFFooter date={generateDate} />
      </Page>
    </Document>
  );
};

// Template for Initial Site Assessment Report
const InitialSiteAssessmentPDF = ({ report, photos }: { report: AnyReport, photos: Photo[] }) => {
  const typedReport = report as any;
  
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Site Conditions</Text>
      <Text style={styles.text}>{typedReport.siteConditions}</Text>
      
      <Text style={styles.sectionTitle}>Key Measurements</Text>
      {Object.entries(typedReport.keyMeasurements || {}).map(([key, value], index) => (
        <Text key={index} style={styles.text}>
          {key}: {value}
        </Text>
      ))}
      
      <Text style={styles.sectionTitle}>Identified Issues</Text>
      {typedReport.identifiedIssues?.map((issue: any, index: number) => (
        <View key={index} style={{ marginBottom: 10 }}>
          <Text style={[styles.text, styles.boldText]}>
            Issue {index + 1} - Severity: {issue.severity}
          </Text>
          <Text style={styles.text}>{issue.description}</Text>
        </View>
      ))}
      
      <PDFPhotos photos={photos} title="Site Photos" />
    </View>
  );
};

// Template for Project Progress Report
const ProjectProgressPDF = ({ report, photos, milestones }: { 
  report: AnyReport, 
  photos: Photo[],
  milestones: Milestone[]
}) => {
  const typedReport = report as any;
  
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Completion Percentage</Text>
      <Text style={styles.text}>{typedReport.completionPercentage}%</Text>
      
      <Text style={styles.sectionTitle}>Timeline Comparison Notes</Text>
      <Text style={styles.text}>{typedReport.timelineComparisonNotes}</Text>
      
      <Text style={styles.sectionTitle}>Recent Accomplishments</Text>
      <Text style={styles.text}>{typedReport.recentAccomplishments}</Text>
      
      <Text style={styles.sectionTitle}>Work Completed Timeline</Text>
      {typedReport.workCompletedTimeline?.map((item: any, index: number) => (
        <View key={index} style={{ marginBottom: 5 }}>
          <Text style={[styles.text, styles.boldText]}>
            {new Date(item.date).toLocaleDateString()}
          </Text>
          <Text style={styles.text}>{item.description}</Text>
        </View>
      ))}
      
      <Text style={styles.sectionTitle}>Milestone Status</Text>
      <View style={styles.table}>
        <View style={[styles.tableRow, { backgroundColor: '#f9fafb' }]}>
          <Text style={[styles.tableHeaderCell, { width: '30%' }]}>Name</Text>
          <Text style={[styles.tableHeaderCell, { width: '20%' }]}>Due Date</Text>
          <Text style={[styles.tableHeaderCell, { width: '20%' }]}>Status</Text>
          <Text style={[styles.tableHeaderCell, { width: '30%' }]}>Notes</Text>
        </View>
        {milestones.map((milestone, index) => (
          <View key={index} style={styles.tableRow}>
            <Text style={[styles.tableCell, { width: '30%' }]}>{milestone.name}</Text>
            <Text style={[styles.tableCell, { width: '20%' }]}>
              {new Date(milestone.dueDate).toLocaleDateString()}
            </Text>
            <Text style={[styles.tableCell, { width: '20%' }]}>{milestone.status}</Text>
            <Text style={[styles.tableCell, { width: '30%' }]}>{milestone.notes || '-'}</Text>
          </View>
        ))}
      </View>
      
      <PDFPhotos photos={photos} title="Progress Photos" />
    </View>
  );
};

// Template for Before/After Transformation Report
const BeforeAfterTransformationPDF = ({ report }: { report: AnyReport }) => {
  const typedReport = report as any;
  
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Transformation Details</Text>
      {typedReport.comparisons?.map((comparison: any, index: number) => (
        <View key={index} style={{ marginBottom: 20 }}>
          <Text style={[styles.text, styles.boldText]}>{comparison.area}</Text>
          <Text style={styles.text}>Description: {comparison.descriptionOfWork}</Text>
          
          <Text style={styles.text}>Materials Used:</Text>
          {comparison.materialsUsed?.map((material: string, idx: number) => (
            <Text key={idx} style={[styles.text, { marginLeft: 10 }]}>â€¢ {material}</Text>
          ))}
          
          <View style={styles.photoRow}>
            <View style={styles.photoContainer}>
              <Image src={comparison.beforePhoto?.url} style={styles.photo} />
              <Text style={styles.photoCaption}>Before</Text>
            </View>
            <View style={styles.photoContainer}>
              <Image src={comparison.afterPhoto?.url} style={styles.photo} />
              <Text style={styles.photoCaption}>After</Text>
            </View>
          </View>
        </View>
      ))}
      
      {typedReport.valueAddedStatement && (
        <>
          <Text style={styles.sectionTitle}>Value Added Statement</Text>
          <Text style={styles.text}>{typedReport.valueAddedStatement}</Text>
        </>
      )}
    </View>
  );
};

// Template for Damage/Issue Documentation Report
const DamageIssueDocumentationPDF = ({ report }: { report: AnyReport }) => {
  const typedReport = report as any;
  
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Documented Issues</Text>
      
      {typedReport.issues?.map((issue: any, index: number) => (
        <View key={index} style={{ marginBottom: 20, borderBottomWidth: 1, borderBottomColor: '#e5e7eb', paddingBottom: 15 }}>
          <Text style={[styles.text, styles.boldText]}>Issue {index + 1}</Text>
          <Text style={styles.text}>Description: {issue.description}</Text>
          
          {issue.causeAssessment && (
            <Text style={styles.text}>Cause Assessment: {issue.causeAssessment}</Text>
          )}
          
          {issue.measurements && Object.keys(issue.measurements).length > 0 && (
            <>
              <Text style={[styles.text, styles.boldText]}>Measurements:</Text>
              {Object.entries(issue.measurements).map(([key, value], idx) => (
                <Text key={idx} style={[styles.text, { marginLeft: 10 }]}>
                  â€¢ {key}: {value}
                </Text>
              ))}
            </>
          )}
          
          <Text style={styles.text}>Recommended Repairs: {issue.recommendedRepairs}</Text>
          
          {issue.photos && issue.photos.length > 0 && (
            <View style={styles.photoRow}>
              {issue.photos.map((photo: Photo, photoIndex: number) => (
                <View key={photoIndex} style={styles.photoContainer}>
                  <Image src={photo.url} style={styles.photo} />
                  <Text style={styles.photoCaption}>{photo.caption || `Issue ${index + 1} - Photo ${photoIndex + 1}`}</Text>
                </View>
              ))}
            </View>
          )}
        </View>
      ))}
    </View>
  );
};

// Template for Client Approval Report
const ClientApprovalPDF = ({ report, photos }: { report: AnyReport, photos: Photo[] }) => {
  const typedReport = report as any;
  
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Work Completed Summary</Text>
      <Text style={styles.text}>{typedReport.workCompletedSummary}</Text>
      
      <Text style={styles.sectionTitle}>Sign-Off Requirements</Text>
      <Text style={styles.text}>{typedReport.signOffRequirements}</Text>
      
      <Text style={styles.sectionTitle}>Next Steps</Text>
      <Text style={styles.text}>{typedReport.nextSteps}</Text>
      
      {typedReport.warrantyInformation && (
        <>
          <Text style={styles.sectionTitle}>Warranty Information</Text>
          <Text style={styles.text}>{typedReport.warrantyInformation}</Text>
        </>
      )}
      
      <PDFPhotos photos={photos} title="Visuals" />
      <PDFSignature signatureData={typedReport.clientSignature} />
    </View>
  );
};

// Template for Daily/Weekly Progress Report
const DailyWeeklyProgressPDF = ({ report, photos }: { report: AnyReport, photos: Photo[] }) => {
  const typedReport = report as any;
  
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Reporting Period</Text>
      <Text style={styles.text}>
        From: {new Date(typedReport.reportingPeriod?.start).toLocaleDateString()} 
        To: {new Date(typedReport.reportingPeriod?.end).toLocaleDateString()}
      </Text>
      
      <Text style={styles.sectionTitle}>Work Completed</Text>
      <Text style={styles.text}>{typedReport.workCompleted}</Text>
      
      {typedReport.hoursWorked && (
        <>
          <Text style={styles.sectionTitle}>Hours Worked</Text>
          <Text style={styles.text}>{typedReport.hoursWorked} hours</Text>
        </>
      )}
      
      {typedReport.resourcesUsed && (
        <>
          <Text style={styles.sectionTitle}>Resources Used</Text>
          <Text style={styles.text}>{typedReport.resourcesUsed}</Text>
        </>
      )}
      
      <Text style={styles.sectionTitle}>Issues Encountered</Text>
      <Text style={styles.text}>{typedReport.issuesEncountered || 'None'}</Text>
      
      {typedReport.solutionsImplemented && (
        <>
          <Text style={styles.sectionTitle}>Solutions Implemented</Text>
          <Text style={styles.text}>{typedReport.solutionsImplemented}</Text>
        </>
      )}
      
      <Text style={styles.sectionTitle}>Plan for Next Period</Text>
      <Text style={styles.text}>{typedReport.planForNextPeriod}</Text>
      
      <PDFPhotos photos={photos} title="Progress Photos" />
    </View>
  );
};

// Template for Contractor Performance Report
const ContractorPerformancePDF = ({ report, photos }: { report: AnyReport, photos: Photo[] }) => {
  const typedReport = report as any;
  
  return (
    <View style={styles.section}>
      {typedReport.contractorInfo && (
        <>
          <Text style={styles.sectionTitle}>Contractor Information</Text>
          <Text style={styles.text}>Name: {typedReport.contractorInfo.name || 'N/A'}</Text>
          <Text style={styles.text}>Email: {typedReport.contractorInfo.email || 'N/A'}</Text>
          <Text style={styles.text}>Phone: {typedReport.contractorInfo.phone || 'N/A'}</Text>
        </>
      )}
      
      <Text style={styles.sectionTitle}>Timeline Adherence</Text>
      <Text style={styles.text}>{typedReport.timelineAdherenceNotes}</Text>
      
      <Text style={styles.sectionTitle}>Quality Assessment</Text>
      <Text style={styles.text}>{typedReport.qualityAssessmentNotes}</Text>
      
      <Text style={styles.sectionTitle}>Communication Effectiveness</Text>
      <Text style={styles.text}>{typedReport.communicationEffectivenessNotes}</Text>
      
      <Text style={styles.sectionTitle}>Issue Resolution</Text>
      <Text style={styles.text}>{typedReport.issueResolutionNotes}</Text>
      
      {typedReport.overallSatisfactionRating !== undefined && (
        <>
          <Text style={styles.sectionTitle}>Overall Satisfaction Rating</Text>
          <Text style={styles.text}>{typedReport.overallSatisfactionRating} / 5</Text>
        </>
      )}
      
      {typedReport.additionalComments && (
        <>
          <Text style={styles.sectionTitle}>Additional Comments</Text>
          <Text style={styles.text}>{typedReport.additionalComments}</Text>
        </>
      )}
      
      <PDFPhotos photos={photos} title="Quality Photos" />
    </View>
  );
};

// Template for Final Project Completion Report
const FinalProjectCompletionPDF = ({ report, photos, milestones }: { 
  report: AnyReport, 
  photos: Photo[],
  milestones: Milestone[]
}) => {
  const typedReport = report as any;
  
  // Split photos into before and after
  const beforePhotos = typedReport.beforePhotos || [];
  const afterPhotos = typedReport.afterPhotos || [];
  
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Project Summary</Text>
      <Text style={styles.text}>Successfully completed project according to specifications.</Text>
      
      {typedReport.finalCostBreakdown && Object.keys(typedReport.finalCostBreakdown).length > 0 && (
        <>
          <Text style={styles.sectionTitle}>Final Cost Breakdown</Text>
          {Object.entries(typedReport.finalCostBreakdown).map(([key, value], index) => (
            <Text key={index} style={styles.text}>
              {key}: ${value}
            </Text>
          ))}
        </>
      )}
      
      <Text style={styles.sectionTitle}>Warranty Information</Text>
      <Text style={styles.text}>{typedReport.warrantyInformation}</Text>
      
      {typedReport.maintenanceInformation && (
        <>
          <Text style={styles.sectionTitle}>Maintenance Information</Text>
          <Text style={styles.text}>{typedReport.maintenanceInformation}</Text>
        </>
      )}
      
      <Text style={styles.sectionTitle}>Milestone Summary</Text>
      <View style={styles.table}>
        <View style={[styles.tableRow, { backgroundColor: '#f9fafb' }]}>
          <Text style={[styles.tableHeaderCell, { width: '40%' }]}>Milestone</Text>
          <Text style={[styles.tableHeaderCell, { width: '20%' }]}>Planned Date</Text>
          <Text style={[styles.tableHeaderCell, { width: '20%' }]}>Actual Date</Text>
          <Text style={[styles.tableHeaderCell, { width: '20%' }]}>Status</Text>
        </View>
        {milestones.map((milestone, index) => (
          <View key={index} style={styles.tableRow}>
            <Text style={[styles.tableCell, { width: '40%' }]}>{milestone.name}</Text>
            <Text style={[styles.tableCell, { width: '20%' }]}>
              {new Date(milestone.dueDate).toLocaleDateString()}
            </Text>
            <Text style={[styles.tableCell, { width: '20%' }]}>
              {milestone.completedDate 
                ? new Date(milestone.completedDate).toLocaleDateString() 
                : 'Not completed'}
            </Text>
            <Text style={[styles.tableCell, { width: '20%' }]}>{milestone.status}</Text>
          </View>
        ))}
      </View>
      
      <Text style={styles.sectionTitle}>Before Photos</Text>
      <PDFPhotos photos={beforePhotos} title="" />
      
      <Text style={styles.sectionTitle}>After Photos</Text>
      <PDFPhotos photos={afterPhotos} title="" />
      
      <PDFSignature signatureData={typedReport.clientSignOff} />
    </View>
  );
}; 